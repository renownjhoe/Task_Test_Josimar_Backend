name: Deploy New Docker Container

on:
  push:
    branches:
      - main

env:
  SERVER_HOST: ${{ secrets.EC2_PUBLIC_IP }}
  SERVER_USER: ${{ secrets.EC2_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.EC2_KEY_PAIR_PEM }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Add server's public key to known_hosts
      - name: Add server public key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 4: Set up SSH key for server connection
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY_PAIR_PEM }}" > private_key.pem
          chmod 600 private_key.pem

      # Step 5: Get short Git commit ID
      - name: Get short Git commit ID
        run: echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      #Step 6: SSH into server and clean up old containers
      - name: Clean up old Docker containers
        run: |
          ssh -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            if ! command -v docker &> /dev/null
            then
              echo "Docker could not be found, installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            fi
            mkdir -p /home/ubuntu/Task_Test_Josimar_Backend
            cd /home/ubuntu/Task_Test_Josimar_Backend
            docker compose down
            docker system prune -af
          EOF

      # Step 7: Ensure the server code is up to date with GitHub
      - name: Pull latest code from GitHub on the server
        run: |
            ssh -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
              cd /home/ubuntu/Task_Test_Josimar_Backend
              if [ ! -d .git ]; then
                git init
                git remote add origin https://github.com/renownjhoe/Task_Test_Josimar_Backend.git
                git fetch
                git checkout -t origin/main
              else
                sudo chown -R $USER:$USER .
                git stash
                git pull origin main
              fi
            EOF

      # Step 7: Build and Push New Docker Image
      - name: Build and Push New Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/php-app:${{ env.COMMIT_ID }} -t ${{ secrets.DOCKERHUB_USERNAME }}/php-app:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/php-app:${{ env.COMMIT_ID }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/php-app:latest

      # Step 8: SSH into server and deploy new containers
      - name: Deploy New Containers
        run: |
            ssh -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
              set -x
              cd /home/ubuntu/Task_Test_Josimar_Backend
              docker network create app-network || true
              docker compose up -d --build || { echo "docker compose up failed"; exit 1; }
              docker network ls
            EOF

      # Step 9: Clean up SSH private key
      - name: Clean up SSH private key
        run: |
          rm -f private_key.pem
        if: always()

      # Step 10: Clean up known_hosts file
      - name: Clean up known_hosts file
        run: |
          rm -f ~/.ssh/known_hosts
        if: always()

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Add server's public key to known_hosts
      - name: Add server public key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Step 2: Set up SSH key for server connection
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY_PAIR_PEM }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Run Smoke Tests
        run: |
            ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
                set -x
                cd /home/ubuntu/Task_Test_Josimar_Backend || { echo "cd failed"; exit 1; }
                docker compose run php-app composer install --no-interaction --no-progress || { echo "composer install failed"; exit 1; }
                docker compose run php-app php artisan migrate --force || { echo "migrate failed"; exit 1; }
                echo "Running smoke tests..."
                curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_PUBLIC_IP }}/api/health || { echo "Smoke test failed: Health check endpoint down"; exit 1; }
                curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_PUBLIC_IP }}/api/users || { echo "Smoke test failed: Users API endpoint down"; exit 1; }
            EOF
  
      - name: Rollback if smoke test fails
        if: failure()
        run: |
          ssh -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -x
            cd /home/ubuntu/Task_Test_Josimar_Backend
            echo "Rolling back to previous deployment..."
            docker compose pull ${{ secrets.DOCKERHUB_USERNAME }}/php-app:previous-tag # Replace with your tag
            docker compose up -d
          EOF

      - name: Clean up SSH private key
        run: |
          rm -f private_key.pem
        if: always()
  
  

  monitoring_check:
    name: Verify Monitoring Services
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Step 1: Add server's public key to known_hosts
      - name: Add server public key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Step 2: Set up SSH key for server connection
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_KEY_PAIR_PEM }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Check Prometheus Service
        run: |
          ssh -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -x
            cd /home/ubuntu/Task_Test_Josimar_Backend
            echo "Checking Docker network..."
            docker network inspect app-network
            echo "Checking container status..."
            docker ps
            echo "Checking if Prometheus is running..."
            sleep 10 # Add a delay
            curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_PUBLIC_IP }}:9090 || { echo "Prometheus is not running"; exit 1; }
          EOF

      - name: Check Grafana Service
        run: |
          ssh -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -x
            cd /home/ubuntu/Task_Test_Josimar_Backend
            echo "Checking if Grafana is running..."
            sleep 10 # Add a delay
            curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_PUBLIC_IP }}:3000 || { echo "Grafana is not running"; exit 1; }
          EOF

      - name: Check prometheus and grafana from inside php-app.
        run: |
          ssh -T -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -x
            cd /home/ubuntu/Task_Test_Josimar_Backend
            echo "Checking prometheus from php-app"
            docker compose run php-app curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_PUBLIC_IP }}:9090 || { echo "Prometheus is not running from php-app"; exit 1; }
            echo "Checking grafana from php-app"
            docker compose run php-app curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_PUBLIC_IP }}:3000 || { echo "Grafana is not running from php-app"; exit 1; }

          EOF